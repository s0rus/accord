generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Member        Member[]
    Message       Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Guild {
    id       String    @id @default(cuid())
    name     String
    icon     String?
    owner    String
    members  Member[]
    channels Channel[]
    Role     Role[]
}

model Member {
    id       String  @id @default(cuid())
    user     String
    guild    String
    nickname String?
    roles    Role[]
    User     User    @relation(fields: [user], references: [id], onDelete: Cascade)
    Guild    Guild   @relation(fields: [guild], references: [id], onDelete: Cascade)
}

model Channel {
    id       String    @id @default(cuid())
    name     String
    type     String
    guild    String
    messages Message[]
    Guild    Guild     @relation(fields: [guild], references: [id], onDelete: Cascade)
}

model Message {
    id        String   @id @default(cuid())
    content   String
    author    String
    channel   String
    timestamp DateTime
    User      User     @relation(fields: [author], references: [id], onDelete: Cascade)
    Channel   Channel  @relation(fields: [channel], references: [id], onDelete: Cascade)
}

model Role {
    id      String   @id @default(cuid())
    name    String
    color   String
    guild   String
    members Member[]
    Guild   Guild    @relation(fields: [guild], references: [id], onDelete: Cascade)
}
